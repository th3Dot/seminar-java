<?xml version="1.0" encoding="UTF-8" ?>

<Form version="1.5" maxVersion="1.9" type="org.netbeans.modules.form.forminfo.JFrameFormInfo">
  <NonVisualComponents>
    <Menu class="javax.swing.JMenuBar" name="mainMenuBar">
      <SubComponents>
        <Menu class="javax.swing.JMenu" name="fileMenu">
          <Properties>
            <Property name="text" type="java.lang.String" value="File"/>
          </Properties>
          <AuxValues>
            <AuxValue name="JavaCodeGenerator_LayoutCodePost" type="java.lang.String" value="fileMenu.setMnemonic(KeyEvent.VK_F);"/>
          </AuxValues>
          <SubComponents>
            <MenuItem class="javax.swing.JMenuItem" name="newAuthorMenuItem">
              <Properties>
                <Property name="accelerator" type="javax.swing.KeyStroke" editor="org.netbeans.modules.form.editors.KeyStrokeEditor">
                  <KeyStroke key="Ctrl+A"/>
                </Property>
                <Property name="text" type="java.lang.String" value="New author..."/>
              </Properties>
              <AuxValues>
                <AuxValue name="JavaCodeGenerator_InitCodePost" type="java.lang.String" value="newAuthorMenuItem.setMnemonic(KeyEvent.VK_N);&#xa;newAuthorMenuItem.setAction(spawnNewAuthorWindowAction);&#xa;newAuthorMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A, KeyEvent.CTRL_DOWN_MASK));"/>
              </AuxValues>
            </MenuItem>
            <MenuItem class="javax.swing.JMenuItem" name="newBookMenuItem">
              <Properties>
                <Property name="accelerator" type="javax.swing.KeyStroke" editor="org.netbeans.modules.form.editors.KeyStrokeEditor">
                  <KeyStroke key="Ctrl+B"/>
                </Property>
                <Property name="text" type="java.lang.String" value="New book..."/>
              </Properties>
              <AuxValues>
                <AuxValue name="JavaCodeGenerator_ListenersCodePost" type="java.lang.String" value="newBookMenuItem.setMnemonic(KeyEvent.VK_B);&#xa;newBookMenuItem.setAction(spawnNewBookWindowAction);&#xa;newBookMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_B, KeyEvent.CTRL_DOWN_MASK));&#xa;&#xa;newBookMenuItem.addMouseListener(new MouseAdapter() {// MouseAdapter is empty implementation&#xa;                                            // of MouseListener&#xa;    @Override&#xa;    public void mouseClicked(MouseEvent e) {&#xa;        JMenuItem m = (JMenuItem) e.getSource();&#xa;        if (!m.isEnabled())&#xa;            JOptionPane.showMessageDialog(MainWindow.this, &quot;You have to create an author first.&quot;);&#xa;    }&#xa;});"/>
              </AuxValues>
            </MenuItem>
          </SubComponents>
        </Menu>
      </SubComponents>
    </Menu>
  </NonVisualComponents>
  <Properties>
    <Property name="defaultCloseOperation" type="int" value="3"/>
    <Property name="title" type="java.lang.String" value="Book Register 1.0"/>
    <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
      <Dimension value="[1024, 480]"/>
    </Property>
    <Property name="preferredSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
      <Dimension value="[1024, 640]"/>
    </Property>
  </Properties>
  <SyntheticProperties>
    <SyntheticProperty name="menuBar" type="java.lang.String" value="mainMenuBar"/>
    <SyntheticProperty name="formSizePolicy" type="int" value="1"/>
    <SyntheticProperty name="generateCenter" type="boolean" value="false"/>
  </SyntheticProperties>
  <AuxValues>
    <AuxValue name="FormSettings_autoResourcing" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_autoSetComponentName" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_generateFQN" type="java.lang.Boolean" value="true"/>
    <AuxValue name="FormSettings_generateMnemonicsCode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_i18nAutoMode" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_layoutCodeTarget" type="java.lang.Integer" value="1"/>
    <AuxValue name="FormSettings_listenerGenerationStyle" type="java.lang.Integer" value="0"/>
    <AuxValue name="FormSettings_variablesLocal" type="java.lang.Boolean" value="false"/>
    <AuxValue name="FormSettings_variablesModifier" type="java.lang.Integer" value="2"/>
    <AuxValue name="designerSize" type="java.awt.Dimension" value="-84,-19,0,5,115,114,0,18,106,97,118,97,46,97,119,116,46,68,105,109,101,110,115,105,111,110,65,-114,-39,-41,-84,95,68,20,2,0,2,73,0,6,104,101,105,103,104,116,73,0,5,119,105,100,116,104,120,112,0,0,1,-3,0,0,4,43"/>
  </AuxValues>

  <Layout class="org.netbeans.modules.form.compat2.layouts.DesignGridLayout">
    <Property name="columns" type="int" value="1"/>
    <Property name="rows" type="int" value="2"/>
  </Layout>
  <SubComponents>
    <Container class="javax.swing.JPanel" name="authorsPanel">

      <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
      <SubComponents>
        <Component class="javax.swing.JLabel" name="authorsLabel">
          <Properties>
            <Property name="text" type="java.lang.String" value="Authors"/>
          </Properties>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
              <BorderConstraints direction="First"/>
            </Constraint>
          </Constraints>
        </Component>
        <Container class="javax.swing.JScrollPane" name="authorsScrollPane">
          <AuxValues>
            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
          </AuxValues>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
              <BorderConstraints direction="Center"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
          <SubComponents>
            <Component class="javax.swing.JTable" name="authorsTable">
              <Properties>
                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
                  <Connection code="authorsTableModel" type="code"/>
                </Property>
                <Property name="columnModel" type="javax.swing.table.TableColumnModel" editor="org.netbeans.modules.form.editors2.TableColumnModelEditor" preCode="authorsTable.getColumnModel().getColumn(2).setCellEditor(new DatePickerCellEditor(new SimpleDateFormat(&quot;dd. MM. yyyy&quot;)));&#xa;authorsTable.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {&#xa;&#xa;        @Override&#xa;        public Component getTableCellRendererComponent(JTable jtable, Object value, boolean selected, boolean hasFocus, int row, int column) {&#xa;&#xa;            if (value instanceof Date) {&#xa;&#xa;                // You could use SimpleDateFormatter instead&#xa;                value = new SimpleDateFormat(&quot;dd. MM. yyyy&quot;).format(value);&#xa;&#xa;            }&#xa;&#xa;            return super.getTableCellRendererComponent(jtable, value, selected, hasFocus, row, column);&#xa;&#xa;        }&#xa;    });&#xa;&#xa;authorsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#xa;&#xa;ListSelectionModel selectionModel = authorsTable.getSelectionModel();&#xa;        selectionModel.addListSelectionListener(new ListSelectionListener() {&#xa;            public void valueChanged(ListSelectionEvent e) {&#xa;                DefaultListSelectionModel source = (DefaultListSelectionModel) e.getSource();&#xa;                if (source.getMinSelectionIndex() &gt;= 0) {&#xa;                    authorsTableModel.setCurrentSlectedIndex(source.getMinSelectionIndex());&#xa;                }&#xa;&#xa;                booksTableModel.setAuthorIndex(source.getMinSelectionIndex());&#xa;            }&#xa;        });" postCode="JPopupMenu authorsPopupMenu = new JPopupMenu();&#xa;       JMenuItem deleteItem = new JMenuItem(&quot;Delete&quot;);&#xa;&#xa;        authorsPopupMenu.addPopupMenuListener(new PopupMenuListener() {&#xa;&#xa;            @Override&#xa;            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {&#xa;                SwingUtilities.invokeLater(new Runnable() {&#xa;                    @Override&#xa;                    public void run() {&#xa;                        int rowAtPoint = authorsTable.rowAtPoint(SwingUtilities.convertPoint(authorsPopupMenu, new Point(0, 0), authorsTable));&#xa;                        if (rowAtPoint &gt; -1) {&#xa;                            authorsTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);&#xa;                            authorsTableModel.setCurrentSlectedIndex(rowAtPoint);&#xa;                        }&#xa;                    }&#xa;                });&#xa;            }&#xa;&#xa;            @Override&#xa;            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {&#xa;                // TODO Auto-generated method stub&#xa;&#xa;            }&#xa;&#xa;            @Override&#xa;            public void popupMenuCanceled(PopupMenuEvent e) {&#xa;                // TODO Auto-generated method stub&#xa;&#xa;            }&#xa;        });&#xa;        deleteItem.addActionListener(new ActionListener() {&#xa;&#xa;            @Override&#xa;            public void actionPerformed(ActionEvent e) {&#xa;                try {&#xa;                    AuthorBackendWorker worker = new AuthorBackendWorker(authorsTableModel.getAuthors()&#xa;                            .get(authorsTable.getSelectedRow()), AuthorBackendWorker.Method.DELETE);&#xa;                    worker.addPropertyChangeListener(new PropertyChangeListener() {&#xa;&#xa;                        @Override&#xa;                        public void propertyChange(PropertyChangeEvent evt) {&#xa;                            if (((SwingWorker.StateValue) evt.getNewValue()).equals(SwingWorker.StateValue.DONE)) {&#xa;                                updateModel();&#xa;                            }&#xa;                        }&#xa;&#xa;                    });&#xa;                    worker.execute();&#xa;&#xa;                } catch (IllegalStateException ex) {&#xa;                    JOptionPane.showMessageDialog(MainWindow.this, &quot;Couldn&apos;t delete author. Reason: &quot; + ex.getMessage());&#xa;                }&#xa;&#xa;            }&#xa;        });&#xa;        authorsPopupMenu.add(deleteItem);&#xa;        authorsTable.setComponentPopupMenu(authorsPopupMenu);">
                  <TableColumnModel selectionModel="0"/>
                </Property>
                <Property name="minimumSize" type="java.awt.Dimension" editor="org.netbeans.beaninfo.editors.DimensionEditor">
                  <Dimension value="[480, 640]"/>
                </Property>
                <Property name="tableHeader" type="javax.swing.table.JTableHeader" editor="org.netbeans.modules.form.editors2.JTableHeaderEditor">
                  <TableHeader reorderingAllowed="true" resizingAllowed="true"/>
                </Property>
              </Properties>
              <AuxValues>
                <AuxValue name="JavaCodeGenerator_InitCodePre" type="java.lang.String" value="authorsTableModel = new AuthorsTableModel();"/>
              </AuxValues>
            </Component>
          </SubComponents>
        </Container>
      </SubComponents>
    </Container>
    <Container class="javax.swing.JPanel" name="booksPanel">

      <Layout class="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout"/>
      <SubComponents>
        <Container class="javax.swing.JScrollPane" name="booksScrollPane">
          <AuxValues>
            <AuxValue name="autoScrollPane" type="java.lang.Boolean" value="true"/>
          </AuxValues>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
              <BorderConstraints direction="Center"/>
            </Constraint>
          </Constraints>

          <Layout class="org.netbeans.modules.form.compat2.layouts.support.JScrollPaneSupportLayout"/>
          <SubComponents>
            <Component class="javax.swing.JTable" name="booksTable">
              <Properties>
                <Property name="model" type="javax.swing.table.TableModel" editor="org.netbeans.modules.form.RADConnectionPropertyEditor">
                  <Connection code="booksTableModel" type="code"/>
                </Property>
                <Property name="columnModel" type="javax.swing.table.TableColumnModel" editor="org.netbeans.modules.form.editors2.TableColumnModelEditor" postCode="booksTable.getColumnModel().getColumn(2).setCellEditor(new DatePickerCellEditor(new SimpleDateFormat(&quot;dd. MM. yyyy&quot;)));&#xa;booksTable.getColumnModel().getColumn(2).setCellRenderer(new DefaultTableCellRenderer() {&#xa;&#xa;        @Override&#xa;        public Component getTableCellRendererComponent(JTable jtable, Object value, boolean selected, boolean hasFocus, int row, int column) {&#xa;&#xa;            if (value instanceof Date) {&#xa;&#xa;                // You could use SimpleDateFormatter instead&#xa;                value = new SimpleDateFormat(&quot;dd. MM. yyyy&quot;).format(value);&#xa;&#xa;            }&#xa;&#xa;            return super.getTableCellRendererComponent(jtable, value, selected, hasFocus, row, column);&#xa;&#xa;        }&#xa;    });&#xa;booksTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);&#xa;&#xa;JPopupMenu booksPopupMenu = new JPopupMenu();&#xa;        JMenuItem deleteBook = new JMenuItem(&quot;Delete&quot;);&#xa;        booksPopupMenu.addPopupMenuListener(new PopupMenuListener() {&#xa;&#xa;            @Override&#xa;            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {&#xa;                SwingUtilities.invokeLater(new Runnable() {&#xa;                    @Override&#xa;                    public void run() {&#xa;                        int rowAtPoint = booksTable.rowAtPoint(SwingUtilities.convertPoint(booksPopupMenu, new Point(0, 0), booksTable));&#xa;                        if (rowAtPoint &gt; -1) {&#xa;                            booksTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);&#xa;                        }&#xa;                    }&#xa;                });&#xa;            }&#xa;&#xa;            @Override&#xa;            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {&#xa;                // TODO Auto-generated method stub&#xa;&#xa;            }&#xa;&#xa;            @Override&#xa;            public void popupMenuCanceled(PopupMenuEvent e) {&#xa;                // TODO Auto-generated method stub&#xa;&#xa;            }&#xa;        });&#xa;        deleteBook.addActionListener(new ActionListener() {&#xa;&#xa;            @Override&#xa;            public void actionPerformed(ActionEvent e) {&#xa;                if (booksTable.getSelectedRow() == -1) {&#xa;                    JOptionPane.showMessageDialog(MainWindow.this, &quot;You haven&apos;t selected any book.&quot;);&#xa;                    return;&#xa;                }&#xa;                BookBackendWorker worker = new BookBackendWorker(booksTableModel.getBooks().get(booksTable.getSelectedRow()), BookBackendWorker.Method.DELETE);&#xa;                worker.addPropertyChangeListener(new PropertyChangeListener() {&#xa;&#xa;                    @Override&#xa;                    public void propertyChange(PropertyChangeEvent evt) {&#xa;                        if (((SwingWorker.StateValue) evt.getNewValue()).equals(SwingWorker.StateValue.DONE)) {&#xa;                            updateModel();&#xa;                        }&#xa;                    }&#xa;&#xa;                });&#xa;                worker.execute();&#xa;&#xa;            }&#xa;        });&#xa;        booksPopupMenu.add(deleteBook);&#xa;        booksTable.setComponentPopupMenu(booksPopupMenu);">
                  <TableColumnModel selectionModel="0">
                    <Column maxWidth="-1" minWidth="-1" prefWidth="-1" resizable="true">
                      <Title/>
                      <Editor/>
                      <Renderer/>
                    </Column>
                    <Column maxWidth="-1" minWidth="-1" prefWidth="-1" resizable="true">
                      <Title/>
                      <Editor/>
                      <Renderer/>
                    </Column>
                    <Column maxWidth="-1" minWidth="-1" prefWidth="-1" resizable="true">
                      <Title/>
                      <Editor/>
                      <Renderer/>
                    </Column>
                    <Column maxWidth="-1" minWidth="-1" prefWidth="-1" resizable="true">
                      <Title/>
                      <Editor/>
                      <Renderer/>
                    </Column>
                  </TableColumnModel>
                </Property>
                <Property name="tableHeader" type="javax.swing.table.JTableHeader" editor="org.netbeans.modules.form.editors2.JTableHeaderEditor">
                  <TableHeader reorderingAllowed="true" resizingAllowed="true"/>
                </Property>
              </Properties>
              <AuxValues>
                <AuxValue name="JavaCodeGenerator_InitCodePre" type="java.lang.String" value="booksTableModel = new BooksTableModel();"/>
              </AuxValues>
            </Component>
          </SubComponents>
        </Container>
        <Component class="javax.swing.JLabel" name="booksLabel">
          <Properties>
            <Property name="text" type="java.lang.String" value="Books"/>
          </Properties>
          <Constraints>
            <Constraint layoutClass="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout" value="org.netbeans.modules.form.compat2.layouts.DesignBorderLayout$BorderConstraintsDescription">
              <BorderConstraints direction="First"/>
            </Constraint>
          </Constraints>
        </Component>
      </SubComponents>
    </Container>
  </SubComponents>
</Form>
